# This is a basic workflow to help you get started with Actions

name: CI

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the main branch
  push:
  pull_request:

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v2

      # Set up environment
      - name: Setup
        run: |
          sudo apt-get update
          sudo apt-get install libmpfr-dev libprimesieve-dev gnuplot llvm-12 clang-12
          # perf list

      # Compile test segments to assembly
      #- name: CompileAsmTest
      #  run: |
      #    llc-12 -O3 -o - CheckAssembly/LLVM_WideInt.ll

      # Run tests.
      - name: RunTests
        run: |
          clang++-12 -std=c++20 -g -Wall -O3 -flto -march=native -lmpfr test/TestBigFloat.cpp -o TestBigFloat
          ./TestBigFloat

      # Compile code
      - name: Compile
        run: |
          clang++-12 --version
          lscpu
          clang++-12 -std=c++20 -g -Wall -O3 -flto -march=native -lmpfr -lprimesieve Search.cpp -o Search
          #clang++ -std=c++20 -DNDEBUG -Wall -O3 -flto -march=native -lmpfr -lprimesieve Search.cpp -o Search_ndebug

      # Run code straight, no profiling.
      # Skip this - experience shows that the overhead from
      # running perf record (at low frequency) is small.
      #- name: Run
      #  run: ./Search

      # Run code straight, no profiling, ndebug version.
      # Skip this - experience shows that the overhead from
      # running perf record (at low frequency) is small.
      #- name: Run (ndebug)
      #  run: ./Search_ndebug

      # Run code (perf)
      - name: Run (perf)
        run: sudo perf record --call-graph dwarf -F 10 -o perf.data ./Search 43

      # Print perf report.
      - name: Report from perf
        run: sudo perf report -i perf.data --call-graph=graph,0.1

      # Print perf source annotations.
      - name: Source annotations from perf
        run: sudo perf annotate -i perf.data

      # Run code
      # - name: Run
      #   run: ./Search

      # Save plot of deltas.
      - name: Save delta plot
        uses: actions/upload-artifact@v2
        with:
          name: delta_plots
          path: |
            DeltaPlot.png
            DeltaPlotScaled.png
