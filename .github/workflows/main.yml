# This is a basic workflow to help you get started with Actions

name: CI

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the main branch
  # push:
  # pull_request:

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

env:
  MY_DEPENDENCY_FLAGS: "-Lprimesieve -Wl,-rpath=primesieve -Iprimesieve/include -Lmpfr/src/.libs -Wl,-rpath=mpfr/src/.libs -Impfr/src -Lgmp-6.2.1/.libs  -Wl,-rpath=gmp-6.2.1/.libs"

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    runs-on: ubuntu-22.04

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v3

      # Set up environment
      - name: Setup
        run: |
          sudo apt-get update
          sudo apt-get install gnuplot llvm-15 clang-15 autoconf-archive libomp-15-dev
          perf config llvm.clang-path=clang-15
          chmod a+x addr2line
          chmod a+x objdump
          PATH=`pwd`:$PATH which addr2line
          PATH=`pwd`:$PATH which objdump
          # perf list

      # build libprimesieve
      - name: SetupPrimeSieve
        run: bash scripts/SetupPrimeSieve.sh

      # Build GMP
      - name: SetupGMP
        run: bash scripts/SetupGMP.sh

      # Build MPFR
      - name: SetupMPFR
        run: bash scripts/SetupMPFR.sh

      # Compile test segments to assembly
      #- name: CompileAsmTest
      #  run: |
      #    llc-12 -O3 -o - CheckAssembly/LLVM_WideInt.ll

      # Run tests.
      - name: RunTests
        run: |
          clang++-15 -std=c++20 -fuse-ld=gold -g -Wall -O3 -flto=thin -march=native $MY_DEPENDENCY_FLAGS test/TestBigFloat.cpp -lmpfr -lgmp -o TestBigFloat
          ./TestBigFloat

      # Time the summing of primes.
      - name: RunTimerSumPrimes
        run: |
          clang++-15 -std=c++20 -fuse-ld=gold -g -Wall -O3 -flto=thin -march=native -Wl,-plugin-opt=whole-program-visibility $MY_DEPENDENCY_FLAGS test/TimerSumPrimes.cpp -lmpfr -lgmp -lprimesieve -o TimerSumPrimes
          ./TimerSumPrimes

      # Time the summing of primes.
      - name: RunTimerSumPrimes2
        run: |
          clang++-15 -std=c++20 -fuse-ld=gold -g -Wall -O3 -flto=thin -march=native -Wl,-plugin-opt=whole-program-visibility $MY_DEPENDENCY_FLAGS test/TimerSumPrimes2.cpp -lmpfr -lgmp -lprimesieve -o TimerSumPrimes2
          ./TimerSumPrimes2

      # Time the summing of primes.
      - name: RunTimerSumPrimes3
        run: |
          clang++-15 -std=c++20 -fuse-ld=gold -g -Wall -O3 -flto=thin -march=native -Wl,-plugin-opt=whole-program-visibility $MY_DEPENDENCY_FLAGS test/TimerSumPrimes3.cpp -lmpfr -lgmp -lprimesieve -o TimerSumPrimes3
          ./TimerSumPrimes3

      # Time the summing of primes.
      - name: RunTimerSumPrimes4
        run: |
          clang++-15 -std=c++20 -fuse-ld=gold -g -Wall -O3 -flto=thin -march=native -Wl,-plugin-opt=whole-program-visibility $MY_DEPENDENCY_FLAGS test/TimerSumPrimes4.cpp -lmpfr -lgmp -lprimesieve -o TimerSumPrimes4
          ./TimerSumPrimes4

      # Time the multiplication of primes.
      - name: RunTimerMulPrimes1
        run: |
          clang++-15 -std=c++20 -fuse-ld=gold -g -Wall -O3 -flto=thin -march=native -Wl,-plugin-opt=whole-program-visibility $MY_DEPENDENCY_FLAGS test/TimerMulPrimes1.cpp -lmpfr -lgmp -lprimesieve -o TimerMulPrimes1
          ./TimerMulPrimes1

      # Time the multiplication of primes.
      - name: RunTimerMulPrimes2
        run: |
          clang++-15 -std=c++20 -fuse-ld=gold -g -Wall -O3 -flto=thin -march=native -Wl,-plugin-opt=whole-program-visibility $MY_DEPENDENCY_FLAGS test/TimerMulPrimes2.cpp -lmpfr -lgmp -lprimesieve -o TimerMulPrimes2
          ./TimerMulPrimes2

      # Time the multiplication of primes.
      - name: RunTimerMulPrimes3
        run: |
          clang++-15 -std=c++20 -fuse-ld=gold -g -Wall -O3 -flto=thin -march=native -Wl,-plugin-opt=whole-program-visibility $MY_DEPENDENCY_FLAGS test/TimerMulPrimes3.cpp -lmpfr -lgmp -lprimesieve -o TimerMulPrimes3
          ./TimerMulPrimes3

      # Compile code
      - name: Compile
        run: |
          clang++-15 --version
          /usr/bin/ld -v
          lscpu
          # Get macros only.
          clang++-15 -march=native -E - -dM </dev/null # print macros
          # Compile and run instrumented version for PGO.
          clang++-15 -fprofile-instr-generate -std=c++20 -fuse-ld=gold -g -Wall -O3 -flto=thin -march=native -Wl,-plugin-opt=whole-program-visibility -fopenmp $MY_DEPENDENCY_FLAGS Search.cpp -lmpfr -lgmp -lprimesieve -o Search
          ./Search 24
          llvm-profdata-15 merge -output=code.profdata default.profraw
          # Now compile the real version.
          clang++-15 -fprofile-instr-use=code.profdata -std=c++20 -fuse-ld=gold -g -Wall -O3 -flto=thin -march=native -Wl,-plugin-opt=whole-program-visibility -fopenmp $MY_DEPENDENCY_FLAGS Search.cpp -lmpfr -lgmp -lprimesieve -o Search
          #clang++ -std=c++20 -DNDEBUG -Wall -O3 -flto -march=native -lmpfr -lprimesieve Search.cpp -o Search_ndebug

      # Run code straight, no profiling.
      # Skip this - experience shows that the overhead from
      # running perf record (at low frequency) is small.
      #- name: Run
      #  run: ./Search

      # Run code straight, no profiling, ndebug version.
      # Skip this - experience shows that the overhead from
      # running perf record (at low frequency) is small.
      #- name: Run (ndebug)
      #  run: ./Search_ndebug

      # Run code (perf)
      - name: Run (perf)
        run: sudo perf record --call-graph dwarf -F 10 -o perf.data ./Search 43

      # Print perf report.
      - name: Report from perf
        run: sudo PATH=`pwd`:$PATH perf report -i perf.data --call-graph=graph,0.1

      # Print perf source annotations.
      - name: Source annotations from perf
        run: sudo PATH=`pwd`:$PATH perf annotate -i perf.data

      # Run code
      # - name: Run
      #   run: ./Search

      # Save plot of deltas.
      - name: Save delta plot
        uses: actions/upload-artifact@v3
        with:
          name: delta_plots
          path: |
            DeltaPlot.png
            DeltaPlotScaled.png
