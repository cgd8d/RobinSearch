# Long run for occasional checks.

name: Long run

# Controls when the workflow will run
on:
  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

env:
  MY_DEPENDENCY_FLAGS: "-Lprimesieve -Wl,-rpath=primesieve -Iprimesieve/include -Lmpfr/src/.libs -Wl,-rpath=mpfr/src/.libs -Impfr/src -Lgmp-6.2.1/.libs  -Wl,-rpath=gmp-6.2.1/.libs"

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    runs-on: ubuntu-22.04

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v3

      # Set up environment
      - name: Setup
        run: |
          sudo apt-get update
          sudo apt-get install gnuplot llvm-15 clang-15 autoconf-archive libomp-15-dev
          perf config llvm.clang-path=clang-15
          chmod a+x addr2line
          chmod a+x objdump
          PATH=`pwd`:$PATH which addr2line
          PATH=`pwd`:$PATH which objdump
          # perf list

      # build libprimesieve
      - name: SetupPrimeSieve
        run: bash scripts/SetupPrimeSieve.sh

      # Build GMP
      - name: SetupGMP
        run: bash scripts/SetupGMP.sh

      # Build MPFR
      - name: SetupMPFR
        run: bash scripts/SetupMPFR.sh

      # Compile code
      - name: Compile
        run: bash scripts/CompileRobinSearch.sh

      # Run code straight, no profiling.
      # Skip this - experience shows that the overhead from
      # running perf record (at low frequency) is small.
      #- name: Run
      #  run: ./Search

      # Run code straight, no profiling, ndebug version.
      # Skip this - experience shows that the overhead from
      # running perf record (at low frequency) is small.
      #- name: Run (ndebug)
      #  run: ./Search_ndebug

      # Run code (perf)
      - name: Run (perf)
        run: sudo perf record --call-graph dwarf -F 10 -o perf.data ./Search 49

      # Print perf report.
      - name: Report from perf
        run: sudo PATH=`pwd`:$PATH perf report -i perf.data --call-graph=graph,0.1

      # Print perf source annotations.
      - name: Source annotations from perf
        run: sudo PATH=`pwd`:$PATH perf annotate -i perf.data

      # Run code
      # - name: Run
      #   run: ./Search

      # Save plot of deltas.
      - name: Save delta plot
        uses: actions/upload-artifact@v3
        with:
          name: delta_plots
          path: |
            DeltaPlot.png
            DeltaPlotScaled.png
