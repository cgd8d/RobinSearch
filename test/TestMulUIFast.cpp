#include <random>
#include <iostream>
#include <exception>
#include <vector>
#include <mpfr.h>
#include "../mpfr_mul_ui_fast.hpp"

std::vector<uint64_t> factors;

void PrintFactors()
{
    if(factors.size()>0)
    {
        std::cerr << factors[0];
    }
    for(size_t i = 1; i < factors.size(); i++)
    {
        std::cerr << "*" << factors[i];
    }
    std::cerr << std::endl;
}

void PrintInterval (mpfr_t mp1, mpfr_t mp2)
{
    std::cerr << "("
              << mpfr_get_d (mp1, MPFR_RNDD)
              << ", "
              << mpfr_get_d (mp2, MPFR_RNDD)
              << ")" << std::endl;
}

// t1,t2 are generated by the custom code.
void CheckIntervals(mpfr_t t1, mpfr_t t2,
                    mpfr_t mp1, mpfr_t mp2)
{
    if(mpfr_greater_p(t1, mp2))
    {
        PrintFactors();
        PrintInterval(mp1, mp2);
        PrintInterval(t1, t2);
        throw std::runtime_error("Intervals do not overlap.");
    }
    if(mpfr_less_p(t2, mp1))
    {
        PrintFactors();
        PrintInterval(mp1, mp2);
        PrintInterval(t1, t2);
        throw std::runtime_error("Intervals do not overlap.");
    }
    mpfr_sub(t1, t2, t1, MPFR_RNDD);
    mpfr_sub(t2, mp2, mp1, MPFR_RNDD);
    mpfr_div(t1, t1, t2, MPFR_RNDD);
    if(mpfr_less_p(mp1, mp2) and mpfr_get_prec(mp1) <= 128 and mpfr_cmp_ui(t1, 10) > 0)
    {
        PrintFactors();
        throw std::runtime_error("mpfr_mul_ui_fast interval is too big.");
    }
}

int main()
{

    std::mt19937_64 mt;

    // Test starting at 2.
    // (Starting at one is not valid.)
    for(size_t i = 0; i < 1000; i++)
    {
        mpfr_t t1, t2, mp1, mp2;
        mpfr_init2(t1, 128);
        mpfr_init2(t2, 128);
        mpfr_set_ui(t1, 2, MPFR_RNDD);
        mpfr_set_ui(t2, 2, MPFR_RNDU);
        mpfr_init2(mp1, 128);
        mpfr_init2(mp2, 128);
        mpfr_set_ui(mp1, 2, MPFR_RNDD);
        mpfr_set_ui(mp2, 2, MPFR_RNDU);
        factors.resize(0);
        factors.push_back(2);
        CheckIntervals(t1, t2, mp1, mp2);
        for(size_t j = 0; j < 1000; j++)
        {
            uint64_t x = mt();
            if(x < 2) continue;
            mpfr_mul_ui_fast(t1, x, MPFR_RNDD);
            mpfr_mul_ui_fast(t2, x, MPFR_RNDU);
            mpfr_mul_ui(mp1, mp1, x, MPFR_RNDD);
            mpfr_mul_ui(mp2, mp2, x, MPFR_RNDU);
            factors.push_back(x);
            CheckIntervals(t1, t2, mp1, mp2);
        }
    }

    // Test starting at arbitrary value.
    for(size_t i = 0; i < 1000; i++)
    {
        mpfr_t t1, t2, mp1, mp2;
        uint64_t x = mt();
        while(x < 2) x = mt();
        mpfr_init2(t1, 128);
        mpfr_init2(t2, 128);
        mpfr_set_ui(t1, x, MPFR_RNDD);
        mpfr_set_ui(t2, x, MPFR_RNDU);
        mpfr_init2(mp1, 1024);
        mpfr_init2(mp2, 1024);
        mpfr_set_ui(mp1, x, MPFR_RNDD);
        mpfr_set_ui(mp2, x, MPFR_RNDU);
        factors.resize(0);
        factors.push_back(x);
        CheckIntervals(t1, t2, mp1, mp2);
        for(size_t j = 0; j < 1000; j++)
        {
            x = mt();
            if(x < 2) continue;
            mpfr_mul_ui_fast(t1, x, MPFR_RNDD);
            mpfr_mul_ui_fast(t2, x, MPFR_RNDU);
            mpfr_mul_ui(mp1, mp1, x, MPFR_RNDD);
            mpfr_mul_ui(mp2, mp2, x, MPFR_RNDU);
            factors.push_back(x);
            CheckIntervals(t1, t2, mp1, mp2);
        }
    }

    std::cout << "passed test of mpfr_mul_ui_fast." << std::endl;
}
